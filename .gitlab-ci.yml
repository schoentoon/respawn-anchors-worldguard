stages:
  - test
  - build

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

image: maven:3-openjdk

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

verify:plugin:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'

package:plugin:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS package'
  artifacts:
    paths:
      - target/*.jar

validate_json:datapack:
  image: alpine
  stage: test
  before_script:
    - apk add yajl-tools
  script:
    - find datapack -type f -name \*.json -print0 | xargs -0 -n 1 -I % sh -c "echo %; cat % | json_verify"

package:datapack:
  image: alpine
  stage: build
  before_script:
    - apk add zip
  script:
    - cd datapack; zip -r $CI_PROJECT_NAME .zip pack.mcmeta data/
  artifacts:
    paths:
      - "datapack/*.zip"
